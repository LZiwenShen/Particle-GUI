name: GitHub Classroom Workflow

on:
  push:
    branches: [ main, master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_TESTS: On
  MEMORY_CHECK: On
  CCACHE_DIR: ${{github.workspace}}/.ccache

jobs:
  build:
    name: Autograding

    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get install libgtk-3-dev libglew-dev 

    - name: Configure Compiler Cache
      if: runner.os == 'Linux'
      run: |
        # Install package
        sudo apt-get install ccache
        # Update symlinks
        sudo /usr/sbin/update-ccache-symlinks
        # Prepend ccache into the PATH
        echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc
        # Source bashrc to test the new PATH
        source ~/.bashrc && echo $PATH
        # Display cache dir
        echo CCACHE_DIR $CCACHE_DIR
        # Create cache dir
        mkdir -p $CCACHE_DIR

    - name: Restore ccache directory
      uses: ./.github/actions/cache-always
      with:
        path: ${{env.CCACHE_DIR}}
        key: ccache-${{ runner.os }}-${{ github.run_id }}
        restore-keys: |
          ccache-${{ runner.os }}

    - name: Restore build directory
      uses: ./.github/actions/cache-always
      with:
        path: ${{github.workspace}}/build
        key: build-${{ runner.os }}-${{ github.run_id }}
        restore-keys: |
          build-${{ runner.os }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j4

